/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class BaseClient {
  public async transformOptions(options: RequestInit): Promise<RequestInit> {
    const token = localStorage.getItem("token");
    const headerData = token
      ? {
          ...options.headers,
          Authorization: "Bearer " + token,
        }
      : {
          ...options.headers,
        };
    return Object.assign({}, options, {
      headers: headerData,
    });
  }
}

export class StockBrokerClient extends BaseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5100";
    }

    requestSharePurchase(request: SharePurchaseRequest): Promise<SharePurchaseReceipt> {
        let url_ = this.baseUrl + "/StockBroker/PurchaseShares";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRequestSharePurchase(_response);
        });
    }

    protected processRequestSharePurchase(response: Response): Promise<SharePurchaseReceipt> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SharePurchaseReceipt.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SharePurchaseReceipt>(<any>null);
    }
}

export class SharePurchaseReceipt implements ISharePurchaseReceipt {
    shareIds?: number[] | undefined;
    taxAmountPayed!: number;

    constructor(data?: ISharePurchaseReceipt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["shareIds"])) {
                this.shareIds = [] as any;
                for (let item of _data["shareIds"])
                    this.shareIds!.push(item);
            }
            this.taxAmountPayed = _data["taxAmountPayed"];
        }
    }

    static fromJS(data: any): SharePurchaseReceipt {
        data = typeof data === 'object' ? data : {};
        let result = new SharePurchaseReceipt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.shareIds)) {
            data["shareIds"] = [];
            for (let item of this.shareIds)
                data["shareIds"].push(item);
        }
        data["taxAmountPayed"] = this.taxAmountPayed;
        return data; 
    }
}

export interface ISharePurchaseReceipt {
    shareIds?: number[] | undefined;
    taxAmountPayed: number;
}

export class SharePurchaseRequest implements ISharePurchaseRequest {
    shareId?: number[] | undefined;
    shareOwnerId!: number;

    constructor(data?: ISharePurchaseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["shareId"])) {
                this.shareId = [] as any;
                for (let item of _data["shareId"])
                    this.shareId!.push(item);
            }
            this.shareOwnerId = _data["shareOwnerId"];
        }
    }

    static fromJS(data: any): SharePurchaseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SharePurchaseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.shareId)) {
            data["shareId"] = [];
            for (let item of this.shareId)
                data["shareId"].push(item);
        }
        data["shareOwnerId"] = this.shareOwnerId;
        return data; 
    }
}

export interface ISharePurchaseRequest {
    shareId?: number[] | undefined;
    shareOwnerId: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

// This class is copied to api.ts when running codegen.
// eslint-disable-next-line @typescript-eslint/no-unused-vars